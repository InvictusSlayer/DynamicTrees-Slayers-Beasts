plugins {
    id "idea"
    id "java"
    id "maven-publish"
    id "net.minecraftforge.gradle" version "6.+"
    id "org.parchmentmc.librarian.forgegradle" version "1.+"
    id "org.spongepowered.mixin" version "0.7.+"
}

version = "${mc_version}-${mod_version}"
group = mod_group
base.archivesName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "parchment", version: "${parch_version}-${mc_version}"
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        configureEach {
            workingDirectory project.file("run")

            property "forge.logging.markers", "SCAN"
            property "forge.logging.console.level", "debug"

            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile","${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property "forge.enabledGameTestNamespaces", mod_id
        }
        server {
            property "forge.enabledGameTestNamespaces", mod_id
            args "--nogui"
        }
        data {
            workingDirectory project.file("run-data")
            args "--mod", mod_id, "--all",
                    "--output", file("src/generated/resources/"),
                    "--existing", file("src/main/resources/"),
                    "--existing", file("src/generated/resources/"),
                    "--existing-mod", "dynamictrees",
                    "--existing-mod", "slayersbeasts"

        }
    }
}

sourceSets.main.java { srcDir "src/main/java" }
sourceSets.main.resources {
    srcDir "src/main/resources"
    srcDir "src/generated/resources"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    maven { url = "https://api.modrinth.com/maven/" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.blamejared.com/" }
    maven { url = "https://modmaven.dev/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("maven.modrinth:dynamictrees:${mc_version}-${dt_version}")
//    implementation fg.deobf("maven.modrinth:dynamictreesplus:${mc_version}-${dtp_version}")
    implementation fg.deobf("maven.modrinth:slayers-beasts:${sb_version}")

    runtimeOnly fg.deobf("dev.architectury:architectury-forge:${arch_version}")
    runtimeOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_version}")
    runtimeOnly fg.deobf("com.github.glitchfiend:TerraBlender-forge:${mc_version}-${tb_version}")

    runtimeOnly fg.deobf("maven.modrinth:cc-tweaked:${cc_version}")
//    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

mixin {
    add sourceSets.main, "${mod_id}.mixins.refmap.json"
    config "${mod_id}.mixins.json"

    debug.verbose = true
    debug.export = true
}

tasks.named("processResources", ProcessResources).configure {
    var replaceProperties = [
            mc_version  : mc_version,   mc_range    : mc_range,     forge_version   : forge_version,
            forge_range : forge_range,  dt_version  : dt_version,   dtp_version     : dtp_version,
            sb_version  : sb_version,   mod_id      : mod_id,
            mod_group   : mod_group,    mod_name    : mod_name,     mod_version     : mod_version,
            mod_authors : mod_authors,  mod_license : mod_license,  mod_description : mod_description,
            homepage_url: homepage_url, source_url  : source_url,   issue_url       : issue_url
    ]
    inputs.properties replaceProperties
    filesMatching(["pack.mcmeta", "META-INF/mods.toml"]) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            groupId = mod_group
            artifactId = mod_id
            version = mod_version
            from components.java
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir("${source_url}")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release = 17
}